// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Place {
  id            Int    @id @default(autoincrement())
  name          String @unique
  phone_number  String
  email         String
  website       String
  description   String
  opening_hours String

  main_address    String   @unique
  other_addresses String[] @default([])
  latitude        Float    @default(0)
  longitude       Float    @default(0)

  category String   @default("Other")
  tags     String[] @default(["Other"])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  images  PlaceImages[]
  imageId String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model PlaceImages {
  id        Int    @id @default(autoincrement())
  place     Place  @relation(fields: [placeId], references: [id])
  placeId   Int
  image_url String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String    @id @default(cuid())
  username   String    @unique
  password   String
  role       Role      @default(USER)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  place      Place[]
  accounts   Account[]
  sessions   Session[]
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
